import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

MONTH_LIST = ['january', 'february', 'march', 'april', 'may', 'june', 'all']

DAY_LIST = ['saturday', 'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'all']

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # Get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = input(' To view the bikeshare data type:\n chicago\n or new york city\n or washington\n').lower()
    while city in CITY_DATA.keys():
            print('You\'ve choosen: {}'.format(city))
            break         
    else:
            print('That is an invalid input...')    
            city = input('Please enter the correct city:\n chicago\n or new york city\n or washington\n').lower()
    
    # Get user input for month (all, january, february, ... , june)
    month = input('To filter the data of {} by a specific month, Enter a month or all for not filtering. '.format(city)).lower()
    while month in MONTH_LIST:
            print('You\'ve choosen: {}'.format(month))
            break
    else:
            print('That is an invalid input...')
            month = input('Please enter the correct month:\n from january up to june or all for not filtering.').lower()   
        
    # Get user input for day of week (all, monday, tuesday, ... sunday)
    day = input('To filter the data of {} by a specific day, Enter a day or all for not filtering. '.format(city)).lower()
    while day in DAY_LIST:
            print('You\'ve choosen: {}'.format(day))
            break
    else:
            print('That is an invalid input...')
            day = input('Please enter the corret day:\n from saturday up to friday or all for not filtering.').lower()    

    print('-'*40)
    return city,month,day

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    # Convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # Extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month_abbr
    df['day_of_week'] = df['Start Time'].dt.day_abbr

    # Filter by month if applicable
    if month != 'all':        
        # use the index of the months list to get the corresponding int
        month = MONTH_LIST.index(month) + 1        
        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # Filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'].str.startswith(day.title())] 
    
    return df
    

def time_stats():
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # Display the most common month
    most_common_month = df['month'].mode()[0]     
    print('The most common month is: {}'.format(most_common_month))

    # Display the most common day of week 
    most_common_day = df['day_of_week'].mode()[0]
    print('The most common day of week is: {}'.format(most_common_day))

    # Display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    most_st_hour = df['hour'].mode()[0]
    print('The most common start hour is: {}'.format(most_st_hour))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats():
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()
    
    # Display most commonly used start station
    most_used_st_stat = df['Start Station'].mode()[0]
    print('The most commonly used start station is: {}'.format(most_used_st_stat))

    # Display most commonly used end station
    most_used_end_stat = df['End Station'].mode()[0]
    print('The most commonly used end station is: {}'.format(most_used_end_stat))

    # Display most frequent combination of start station and end station trip
    df["route"] = df["Start Station"] + "_" + df["End Station"]
    most_route = df['route'].mode()[0]
    print('The most frequent combination of start station and end station trip is: {}'.format(most_route))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # Display total travel time
    total_time = df['Trip Duration'].sum()
    print('The total travel time is: {}'.format(total_time))

    # Display mean travel time
    mean_time = df['Trip Duration'].mean()
    print('The mean travel time is: {}'.format(mean_time))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    user_types_count = df['User Type'].count()
    print('user counts are: {}'.format(user_types_count))
    user_types = df['User Type'].value_counts()
    print('user types are: {}'.format(user_types))

    # Display counts of gender
    gender_count = df['Gender'].count()
    print('gender counts are: {}'.format(gender_count)) 
    gender_types = df['Gender'].value_counts()
    print('gender types are: {}'.format(gender_types))
    
    # Count the number of NaN values in the gender column
    NaN_gender = gender_count.isnull().sum().sum()
    Print(NaN_gender)

    # Replace NaN values with 0
    gender_count.fillna(0)

    # Display earliest, most recent, and most common year of birth
    earliest_birth_y = df['Birth Year'].min()
    print('The earliest birth year is:{}'.format( earliest_birth_y))
    
    most_recent_birth_y = df['Birth Year'].max()
    print('The most recent birth year is: {}'.format(most_recent_by))

    common_birth_y = df['Birth Year'].mode()[0]
    print('The most common birth year is: {}'.format(common_birth_y))

    # Count the number of NaN values in the birth year column
    count_birth_y = df['Birth Year'].count()
    NaN_birth_y = count_birth_y.isnull().sum().sum()
    print('The number of NaN values in the birth year is: {}'.format(NaN_birth_y)) 
    # Replace NaN values with 0
    count_birth_y.fillna(0)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
def dis_raw_data(city):
    """ Shows the 5 raws data of the specific city."""
    display_raw = input('\nDo you want to display the raw data? Enter yes or no.\n')
    try:
        for chunk in pd.read_csv(CITY_DATA[city],chunksize=5):
            print(chunk)
            display_raw = input('\nDo you want to display another 5 raws? Enter yes or no.\n')
            if display_raw != 'yes':
                print('Thank You, that\'s a great work')
                break
        break
    except KeyboardInterrupt:
        print('Thanks.')
display_raw_data(city)

def main():
    while True:
        city, month, day = get_filters()
        print(city, month, day)
        df = load_data(city, month, day)
        print(df.head())
        df.columns
        df.describe()
        
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df, city) 
        dis_raw_data(city)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            print('Thanks, Exiting...')
            break
if __name__ == "__main__":
	main()
